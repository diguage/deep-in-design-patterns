@startuml

title 抽象工厂模式

abstract class AbstractFactory {
  + {abstract} createProductA() :AbstractProductA
  + {abstract} createProductB() :AbstractProductB
}
note top: 抽象工厂接口，\n它里面应该包含所有的\n产品创建的抽象方法。

class ConcreteFactory1 {
  + createProductA() :AbstractProductA
  + createProductB() :AbstractProductB
}

class ConcreteFactory2 {
  + createProductA() :AbstractProductA
  + createProductB() :AbstractProductB
}

abstract class AbstractProductA {
}

class ProductA1 {
}

class ProductA2 {
}

abstract class AbstractProductB {
}

class ProductB1 {
}

class ProductB2 {
}

note "具体的工厂，\n创建具有特别实现的产品对象。" as cfn
cfn .. ConcreteFactory1
cfn .. ConcreteFactory2

note "抽象产品，\n它们都可能有两种不同的实现。" as apn

apn .. AbstractProductA
apn .. AbstractProductB

note "对两个抽象产品的具体分类实现" as cpn
ProductA1 .. cpn
ProductA2 .. cpn
ProductB1 .. cpn
ProductB2 .. cpn

class Client {
  - factory  :AbstractFactory
  - productA :AbstractProductA
  - productB :AbstractProductB
}

AbstractFactory <|-- ConcreteFactory1
AbstractFactory <|-- ConcreteFactory2

AbstractProductA <|-- ProductA1
AbstractProductA <|-- ProductA2

AbstractProductB <|-- ProductB1
AbstractProductB <|-- ProductB2

Client --> AbstractFactory
Client --> AbstractProductA
Client --> AbstractProductB

ConcreteFactory1 ..> ProductA1
ConcreteFactory1 ..> ProductB1

ConcreteFactory2 ..> ProductA2
ConcreteFactory2 ..> ProductB2



@enduml
