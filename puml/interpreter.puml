@startuml

title <b>解释器模式</b>

abstract class AbstractExpression {
  + {abstract} interpret(context :Context) :Object
}
note left: 抽象表达式，声明一个抽象的解释操作，\n该接口为抽象语法树中所有的节点所共享。

class TerminalExpression {
  + interpret(context :Context) :Object
}
note bottom: 终结符表达式，实现与文法中的\n终结符相关联的解释操作。

class NonterminalExpression {
  + interpret(context :Context) :Object
}
note bottom: 非终结符表达式，为文法中的非终结符实现解释操作。\n对文法中每一条规则 R1、R2…… 都需要一个具体的非终结符表达式。

class Context {
}
note bottom: 包含解释器之外的一些全局信息。

class Client {
}

Client -right-> Context
Client -left-> AbstractExpression

AbstractExpression <|-- TerminalExpression
AbstractExpression <|-- NonterminalExpression

NonterminalExpression o--> AbstractExpression

@enduml
