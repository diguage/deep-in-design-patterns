@startuml
title "**装饰模式**"

abstract class Component {
  + {abstract} operation() :void
}
note right: Component 是定义一个对象接口，\n可以给这些对象动态地添加职责。

class ConcreteComponent {
  + operation() :void
}
note "ConcreteComponent 是定义了\n一个具体的对象，也可以给这个\n对象添加一些职责。" as ccn
ccn .. ConcreteComponent

abstract class Decorator {
  - component :Component
  + {abstract} operation() :void
}
note "Decorator，装饰抽象类，\n继承了 Component，从外类\n来扩展 Component 的功能，\n但对于 Component 来说，\n是无需知道 Decorator 的存在的。" as dn
Decorator .. dn

class ConcreteDecoratorA {
  + operation() :void
}

class ConcreteDecoratorB {
  + operation() :void
  - addBehavior() :void
}
note "ConcreteDecorator 就是具体的装饰对象，\n起到给 Component 添加职责的功能。" as cdn
'cdn .. ConcreteDecoratorA
'cdn .. ConcreteDecoratorB
ConcreteDecoratorA .. cdn
ConcreteDecoratorB .. cdn

Decorator "-component" o-- Component

Component <|-- ConcreteComponent
Component <|-- Decorator
Decorator <|-- ConcreteDecoratorA
Decorator <|-- ConcreteDecoratorB

footer D瓜哥 · https://www.diguage.com · 出品
@enduml
